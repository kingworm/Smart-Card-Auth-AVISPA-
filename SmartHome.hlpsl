% --------------------------------------------------------------------------------
% Author -	@Nagaraj Poti
% Roll	-	20162010
% --------------------------------------------------------------------------------

% User role
% --------------------------------------------------------------------------------

role user (
	A, B, C : agent,
	% A is the IoT Node(Client) and B is the Fog Node(Server) and C is control node
	S : symmetric_key,
	% S is the symmetric key between the Client and the Server
	H : hash_func,
	% H is a cryptographic hash function
	SND, RCV : channel(dy)
	% Dolev Yao model channels 
)

played_by A 

def=

local
	State : nat,	% Transition state
	Nu : text,		% Secret nonce
	ID : text, 		% User ID chosen randomly
	Ps : text,		% Public key of the server
	C : text,		% Smart card UID
	G : nat,			% Server generator nonce
	P : nat,			% Random prime nonce
	PWD : text,		% User password
	Q1 : text,		% Smart card UID - Part I
	Q2 : text,		% Smart card UID - Part II 
	Cnew : text,	% Login computed C
	Anew : text,	% Login computed check
	N1 : nat,		% Random nonce n1
	N2 : nat,		% Random nonce alpha
	V : text,		% V corresponding to K1 computation
	X : text,		% Message
	Vs : text, 		% V corresponding to computation at server
	SK : text,		% Session key client side
	TID : text		% Ticket generated by user
    

init 
	State := 0

transition

% Registration initiated by user - sends ID to server along with secret nonce 
0.	State = 0 /\ RCV(start) =|> 
		State' := 2 /\ Nu' := new() /\ ID' := new() /\ SND(ID'.{ID'.Nu'}_S)
		/\ witness(B, A, nua, Nu')

% User receives smartcard from the server and stores it locally along with password
2.	State = 2 /\ RCV({C'.Ps'.G'.P'}_S) =|> 
		State' := 4 /\ PWD' := new() /\ Q1' := xor(C', H(PWD'.ID)) 
		/\ Q2' := H(C'.PWD'.ID) /\ secret(Q1', cid, {A, B}) 
		
% User enters uid and pwd and waits for verification from smart card
4. State = 4 /\ RCV(start) =|> 
		State' := 6 /\ Cnew' := xor(Q1, H(PWD.ID)) /\ Anew' := H(Cnew'.PWD.ID)
		
% User sends verified ticket to server by binding it with public key
6. State = 6 /\ Anew = A /\ RCV(start) =|> 
		State' := 8 /\ N1' := new() /\ N2' := new() /\ V' := exp(G, H(N2'.C))  
		/\ TID' := xor(ID.N1', H(exp(Ps, H(N2'.C)))) 
		/\ SND(xor(ID.N1', H(exp(Ps, H(N2'.C)))).V') 
		/\ witness(A, B, user_server_tid, TID') 
		/\ witness(A, B, user_server_v, V') 

% User receives response message from the server via public channel		
10. State = 8 /\ RCV(Vs'.X') =|>
		State' := 10 /\ SK' := exp(Vs', H(N2.C))
	
% User sends confirmation message to server via public channel
12. State = 10 /\ H(V.C.Vs.SK.N1) = X /\ RCV(start) =|>
		State' := 12 /\ SND(H(SK.Vs.C.N1)) /\ request(A, B, user_server_v2, Vs)
		/\ request(A, B, user_server_conf, X)  	
		
end role

% --------------------------------------------------------------------------------


% Server role
% --------------------------------------------------------------------------------

role server (
	A, B : agent,
	% A is the user and B is the server
	S : symmetric_key,
	% S is the symmetric key between the user and the server
	H : hash_func,
	% H is a cryptographic hash function
	SND, RCV : channel(dy)
)

played_by B

def=

local 
	State : nat,	% Transition state
	ID : text,		% Client ID
	Nu : text,		% User identifier and validator token
	SD : text, 		% Smart card ID
	Ks : text,		% Server secret key
	G : nat, 		% Generator of the class
	P : nat,			% Random prime nonce
	TID : text,		% Ticket from user
	V : text,		% V corresponding to K1 computation at user end
	K2 : text,		% K2 computation
	U : text,		% Incoming user tid - ID + Ks combo
	Q : nat, 		% Random nonce at the server
	SK : text,		% Session key server side
	Vs : text, 		% V corresponding to computation at server 
	X : text,		% Message
	Conf : text,	% Final confirmation message
	ACK : text,		% Final acknowledgment sent to user
	C : text			% Smart card UID client

init
	State := 1

transition

% Server receives request from user for authentication and new smart card 
% if the user does not exist in the database
1.	State = 1 /\ RCV(ID'.{Nu'}_S) =|> 
		State' := 3 /\ SD' := new() /\ SND({H(ID'.Ks.SD').exp(G, Ks).G.P}_S) 
		/\ witness(B, A, server_user_sid, SD')

% Server verifies whether user is properly authenticated
7. State = 3 /\ RCV(TID'.V') =|>
		State' := 5 /\ K2' := exp(V', Ks) /\ U' := xor(TID', K2')

% Server computes decryption key and after computation sends response message		
9. State = 5 /\ U = H(ID.Ks) /\ RCV(start) =|>
		State' := 7 /\  Q' := new() /\ SK' := exp(V, H(Ks.Q')) 
		/\ Vs' := exp(G, H(Ks.Q')) /\ C' := H(ID.Ks.SD) 
		/\ X' := H(V.H(ID.Ks.SD).Vs'.SK.Nu)	/\ SND(Vs'.X') 

% If confirmation message is received well and successfully, successive 
% communication is done with the session key
13. State = 7 /\ RCV(Conf') /\ H(SK.Vs.C.Nu) = Conf =|> SND({ACK}_SK)
		/\ request(B, A, server_user_ack, Conf')
						
end role	

% --------------------------------------------------------------------------------


% Session role
% --------------------------------------------------------------------------------

role session (
	A, B : agent,
	% A is the user and B is the server
	S : symmetric_key,
	% S is the symmetric key between the user and the server
	H : hash_func
	% H is a cryptographic hash function
)

def=

local 
	SAB, RAB, SBA, RBA : channel(dy)

composition
	user(A, B, S, H, SAB, RAB) /\ server(A, B, S, H, SBA, RBA)

end role

% --------------------------------------------------------------------------------


% Environment role
% --------------------------------------------------------------------------------

role environment()

def=

const 
	nua, cid, user_server_tid, user_server_v, server_user_sid,
	user_server_v2, user_server_conf, server_user_ack : protocol_id,
	a, b : agent,
	sab, sai, sib : symmetric_key,
	h : hash_func
	
intruder_knowledge = {a, b, sai, sib, h}

composition
	session(a, b, sab, h)  
	/\ session(a, b, sab, h) 
	/\ session(a, i, sai, h) 
	/\ session(i, b, sib, h)
	 
end role

% --------------------------------------------------------------------------------

% Goals
% --------------------------------------------------------------------------------

goal
	authentication_on nua	% User nonce generated during registration is weak auth
	secrecy_of cid				% Smart card must remain secret to user
	weak_authentication_on user_server_tid	% Ticket identifies user issuing request
	weak_authentication_on user_server_v	% Identifies user issuing request
	authentication_on user_server_v2			% Final confirmation of session establishment
	authentication_on user_server_conf		% Final confirmation of session establishment
	weak_authentication_on server_user_sid	% Smart card id associated with user
	authentication_on server_user_ack		% Final confirmation before session establishment
end goal

% --------------------------------------------------------------------------------
environment()
